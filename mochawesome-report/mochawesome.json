{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-23T16:08:23.434Z",
    "end": "2024-06-23T16:10:30.781Z",
    "duration": 127347,
    "testsRegistered": 18,
    "passPercent": 72.22222222222221,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 5,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "29d1e75c-f0db-4ed0-9e73-d8a63ebb51d7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "23bd5dfc-4cdd-495c-b154-add0029bc052",
          "title": "Tests_for_account_functionality",
          "fullFile": "C:\\Users\\Okechi\\Desktop\\Javascript\\Projects\\Selenium\\tests\\accountFunctionalityTest.js",
          "file": "\\tests\\accountFunctionalityTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Successfully registers a user and deletes account",
              "fullTitle": "Tests_for_account_functionality Successfully registers a user and deletes account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Create user function\n        await createUser(driver)\n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "f0b173ff-9e71-40b5-b527-d19cfcfa4684",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully registers a user",
              "fullTitle": "Tests_for_account_functionality Successfully registers a user",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        \n        //Create user function\n        await createUser(driver);\n    \n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "8e1176cc-6e77-49c4-9152-e9ccaebb629a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully logs in a user with incorrect details",
              "fullTitle": "Tests_for_account_functionality Successfully logs in a user with incorrect details",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        \n        //Navigate to the webpage\n        await driver.get(webSite);\n        \n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isLoginVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed();\n        if (isLoginVisible) {\n            //Enter Email and password\n            await driver.findElement(By.xpath(\"//div[@class='login-form']/form/input[2]\")).sendKeys(accountDetails.email)\n            await driver.findElement(By.xpath(\"//div[@class='login-form']/form/input[3]\")).sendKeys(accountDetails.password+\"s\")\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='login-form']/form/button\", Key.RETURN)).click()\n        //Get login error text\n        const loginErrorVisible = await driver.findElement(By.xpath(\"//div[@class='login-form']/form/p\")).getText();\n        //Chai assert comparing error text to stored variable\n        expect(loginErrorVisible).to.equal(loginError);\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "f1f48d01-87a2-4ae5-b9f7-693f68b0007a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully logs in a registerd a user with correct details and logs the user out",
              "fullTitle": "Tests_for_account_functionality Successfully logs in a registerd a user with correct details and logs the user out",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        \n        //Logs in the user\n        await userLogin(driver);\n        //Logs the user out\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[4]/a/i\")).click();\n        const loginPageCheck = await driver.getCurrentUrl();\n        //Chai assert to check if user has been logged out\n        expect(loginPageCheck).to.equal(\"https://www.automationexercise.com/login\")\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "9a8a97a1-2781-4237-8255-2ad36e152425",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully logs in a registerd a user with correct details and deletes the users account",
              "fullTitle": "Tests_for_account_functionality Successfully logs in a registerd a user with correct details and deletes the users account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        \n        //Logs in the user\n        await userLogin(driver);\n        \n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        await adHandler(driver);\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        \n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "c6c9cf3e-4218-4fb1-b448-c9016c3e264b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f0b173ff-9e71-40b5-b527-d19cfcfa4684",
            "8e1176cc-6e77-49c4-9152-e9ccaebb629a",
            "f1f48d01-87a2-4ae5-b9f7-693f68b0007a",
            "9a8a97a1-2781-4237-8255-2ad36e152425",
            "c6c9cf3e-4218-4fb1-b448-c9016c3e264b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "01f96555-0ae9-42a9-af1e-a065ce674056",
          "title": "Tests_for_Website_functionality",
          "fullFile": "C:\\Users\\Okechi\\Desktop\\Javascript\\Projects\\Selenium\\tests\\webpageFunctionalityTests.js",
          "file": "\\tests\\webpageFunctionalityTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Succesfully uses the Contact Us form and navigates to home using the button in page body",
              "fullTitle": "Tests_for_Website_functionality Succesfully uses the Contact Us form and navigates to home using the button in page body",
              "timedOut": false,
              "duration": 4111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch Browswer    \n        let driver = new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        \n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Click contact us link\n        await driver.findElement(By.className(\"fa fa-envelope\")).click();\n        //Is contact us form visible\n        let isContactUsFormVisible = await driver.findElement(By.id(\"contact-us-form\")).isDisplayed();\n        //Chai assert to check if contact us form is visible\n        expect(isContactUsFormVisible).to.equal(true);\n        //Send form information\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='name']\")).sendKeys(contactUsDetails.first_name);\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='email']\")).sendKeys(contactUsDetails.email);\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='subject']\")).sendKeys(contactUsDetails.subject);\n        await driver.findElement(By.xpath(\"//textarea[@class='form-control'][@name='message']\")).sendKeys(contactUsDetails.message);\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='upload_file']\")).sendKeys(upload);\n        await driver.findElement(By.xpath(\"//input[@class='btn btn-primary pull-left submit_form']\")).click();\n        //Select alert\n        let alert = await driver.switchTo().alert();\n        //Confirm alert text\n        let alertText = await alert.getText();\n        expect(alertText).to.equal(\"Press OK to proceed!\")\n        \n        //Accept alert\n        await alert.accept();\n        //Is success message visible\n        let isSuccessMessageVisible = await driver.findElement(By.className(\"status alert alert-success\")).isDisplayed()\n        //Chai assert to confirm success message\n        expect(isSuccessMessageVisible).to.equal(true);\n        //Click home Button in page body\n        await driver.findElement(By.className(homeArr[0])).click();\n        //Confirm home page is loaded\n        let logoIsVisible = await driver.findElement(By.className(\"logo pull-left\")).isDisplayed();\n        expect(logoIsVisible).to.equal(true);\n        //Close browser\n        await driver.close()",
              "err": {},
              "uuid": "b9ddfda9-8763-434d-9b1c-9449075a4a30",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succesfully uses the Contact Us form and navigates to home using the button in navigation bar",
              "fullTitle": "Tests_for_Website_functionality Succesfully uses the Contact Us form and navigates to home using the button in navigation bar",
              "timedOut": false,
              "duration": 4200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch Browswer    \n        let driver = new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Click contact us link\n        await driver.findElement(By.className(\"fa fa-envelope\")).click();\n        //Is contact us form visible\n        let isContactUsFormVisible = await driver.findElement(By.id(\"contact-us-form\")).isDisplayed();\n        //Chai assert to check if contact us form is visible\n        expect(isContactUsFormVisible).to.equal(true);\n        //Send form information\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='name']\")).sendKeys(contactUsDetails.first_name);\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='email']\")).sendKeys(contactUsDetails.email);\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='subject']\")).sendKeys(contactUsDetails.subject);\n        await driver.findElement(By.xpath(\"//textarea[@class='form-control'][@name='message']\")).sendKeys(contactUsDetails.message);\n        await driver.findElement(By.xpath(\"//input[@class='form-control'][@name='upload_file']\")).sendKeys(upload);\n        await driver.findElement(By.xpath(\"//input[@class='btn btn-primary pull-left submit_form']\")).click();\n        //Select alert\n        let alert = await driver.switchTo().alert();\n        //Confirm alert text\n        let alertText = await alert.getText();\n        expect(alertText).to.equal(\"Press OK to proceed!\")\n        \n        //Accept alert\n        await alert.accept();\n        //Is success message visible\n        let isSuccessMessageVisible = await driver.findElement(By.className(\"status alert alert-success\")).isDisplayed()\n        //Chai assert to confirm success message\n        expect(isSuccessMessageVisible).to.equal(true);\n        //Click home Button in page body\n        await driver.findElement(By.className(homeArr[1])).click();\n        //Confirm home page is loaded\n        let logoIsVisible = await driver.findElement(By.className(\"logo pull-left\")).isDisplayed();\n        expect(logoIsVisible).to.equal(true);\n        //Close browser\n        await driver.close()",
              "err": {},
              "uuid": "3bfd0622-3c9b-4e12-b72d-cf76e3d8ee7f",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully navigates to the test cases page",
              "fullTitle": "Tests_for_Website_functionality Sucessfully navigates to the test cases page",
              "timedOut": false,
              "duration": 4369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch Browswer    \nlet driver = new Builder().forBrowser(\"chrome\").build();\n\n//Moves browser window \nawait driver.manage().window().setRect({x: 10, y: -1440 });\n\n//Navigate to the webpage\nawait driver.get(webSite);\n//Is there a consent pop up, if there is select consent to close\nconst isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\nif (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n//Navigate to test cases page\nawait driver.findElement(By.xpath(\"//div[@class='item active']/div/a[@class='test_cases_list']\")).click();\n//Confirm test case page is visible\nlet isTestCasePageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\nexpect(isTestCasePageVisible).to.equal(true);\nawait driver.close();",
              "err": {},
              "uuid": "fe52e2a8-c401-4382-80f5-76a8c2efd1aa",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully navigates to the products page and views the first product",
              "fullTitle": "Tests_for_Website_functionality Sucessfully navigates to the products page and views the first product",
              "timedOut": false,
              "duration": 5735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        let isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Product information\n        let productName = await driver.findElement(By.xpath(\"//div[@class='features_items']/div[@class='col-sm-4'][1]/div/div/div/p\")).getText()\n        let productPrice = await driver.findElement(By.xpath(\"//div[@class='features_items']/div[@class='col-sm-4'][1]/div/div/div/h2\")).getText()\n        //View first product\n        await driver.findElement(By.xpath(\"//div[@class='features_items']/div[@class='col-sm-4'][1]/div/div[@class='choose']\")).click();\n        await adHandler(driver)\n        //Product page information\n        let productDetailsName = await driver.findElement(By.xpath(\"//div[@class='product-information']/h2\")).getText()\n        let productDetailsPrice = await driver.findElement(By.xpath(\"//div[@class='product-information']/span/span\")).getText()\n        //Check if its the correct product\n        expect(productName).to.equal(productDetailsName);\n        expect(productPrice).to.equal(productDetailsPrice);\n        //Close browser\n        await driver.close();",
              "err": {},
              "uuid": "815cc3d8-dbc2-49ed-b317-0b0a69b91be7",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully uses the search function to find a product",
              "fullTitle": "Tests_for_Website_functionality Sucessfully uses the search function to find a product",
              "timedOut": false,
              "duration": 5967,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch Browswer    \n        const driver = new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        \n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Gather product name information\n        const getProductName = async (browser) =>{\n            const products = await browser.findElements(By.xpath(\"//div[@class='productinfo text-center']/p\"));\n            const rngProduct = Math.floor(Math.random() * products.length);\n            const productName = await products[rngProduct].getText();\n            console.log(productName);\n            return productName;\n        };\n        const returnedProductName = await getProductName(driver)\n        //Search for random product \n        await driver.findElement(By.id(\"search_product\")).sendKeys(returnedProductName);\n        await driver.findElement(By.id(\"submit_search\")).click();\n        \n        //Product page information\n        const productNameConfirm = await driver.findElement(By.xpath(\"//div[@class='productinfo text-center']/p\")).getText();\n        expect(productNameConfirm).to.equal(returnedProductName);\n        //Close browser\n        await driver.close();",
              "err": {},
              "uuid": "5fbbb801-b48f-4a95-8c5d-a8709cdebb14",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully uses the subscribe for recent updates function",
              "fullTitle": "Tests_for_Website_functionality Successfully uses the subscribe for recent updates function",
              "timedOut": false,
              "duration": 2777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch Browswer    \nlet driver = new Builder().forBrowser(\"chrome\").build();\n//Moves browser window \nawait driver.manage().window().setRect({x: 10, y: -1440 });\n\n//Navigate to the webpage\nawait driver.get(webSite);\n//Is there a consent pop up, if there is select consent to close\nconst isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\nif (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n//Find and scroll to the subscribe box\nconst subscribeBox = await driver.findElement(By.id(\"susbscribe_email\"));\nawait driver.actions().scroll(0,0,0,200, subscribeBox).perform();\n//Enter email information\nawait driver.findElement(By.id(\"susbscribe_email\")).sendKeys(contactUsDetails.email);\nawait driver.findElement(By.id(\"subscribe\")).click();\n//confirm subscription\nconst subscribeConfirm = await driver.findElement(By.className(\"alert-success alert\")).isDisplayed();\nexpect(subscribeConfirm).to.equal(true);\n//Close browser\nawait driver.close()",
              "err": {},
              "uuid": "d6bf5dc5-c4dd-4874-8461-3cc5d3aaf330",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully uses the subscribe for recent updates function on the cart page",
              "fullTitle": "Tests_for_Website_functionality Successfully uses the subscribe for recent updates function on the cart page",
              "timedOut": false,
              "duration": 4119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch Browswer    \nlet driver = new Builder().forBrowser(\"chrome\").build();\n//Moves browser window \nawait driver.manage().window().setRect({x: 10, y: -1440 });\n\n//Navigate to the webpage\nawait driver.get(webSite);\n//Is there a consent pop up, if there is select consent to close\nconst isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\nif (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n//Click on the cart link\nawait driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n//Verify it's the correct page\nconst cartUrl = await driver.getCurrentUrl();\nexpect(cartUrl).to.include(\"view_cart\");\n//Find and scroll to the subscribe box\nconst subscribeBoxScroll = await driver.findElement(By.xpath(\"//div[@class='single-widget']/h2\"));\nawait driver.actions().scroll(0,0,0,200, subscribeBoxScroll).perform();\n//Find and scroll to the subscribe box\nconst subscribeBox = await driver.findElement(By.id(\"susbscribe_email\"));\nawait driver.actions().scroll(0,0,0,200, subscribeBox).perform();\n//Enter email information\nawait driver.findElement(By.id(\"susbscribe_email\")).sendKeys(contactUsDetails.email);\nawait driver.findElement(By.id(\"subscribe\")).click();\n//confirm subscription\nconst subscribeConfirm = await driver.findElement(By.className(\"alert-success alert\")).isDisplayed();\nexpect(subscribeConfirm).to.equal(true);\n//Close browser\nawait driver.close()",
              "err": {},
              "uuid": "e787c981-32a9-49ce-a7b4-ae4781a7156b",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully navigates to the products page and adds products to the cart",
              "fullTitle": "Tests_for_Website_functionality Sucessfully navigates to the products page and adds products to the cart",
              "timedOut": false,
              "duration": 7395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //first product\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const firstProductName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const firstProductPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/a[@class='btn btn-default add-to-cart']\")).click();\n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        //Second product\n        const secondProductName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[3]//div[@class='productinfo text-center']/p\")).getText();\n        const secondProductPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[3]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[3]//div[@class='productinfo text-center']/a[@class='btn btn-default add-to-cart']\")).click();\n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        //Navigate to the cart\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        //Confirm that products are correct\n        const firstCartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const firstCartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const firstCartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        const secondCartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[2]/td[2]/h4/a\")).getText();\n        const secondCartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[2]/td[3]/p\")).getText();\n        const secondCartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[2]/td[4]/button\")).getText();\n        \n        expect(firstCartItemName).to.equal(firstProductName);\n        expect(firstCartItemPrice).to.equal(firstProductPrice);\n        expect(firstCartItemQuantity).to.equal(\"1\");\n        expect(secondCartItemName).to.equal(secondProductName);\n        expect(secondCartItemPrice).to.equal(secondProductPrice);\n        expect(secondCartItemQuantity).to.equal(\"1\");\n        //Close browser\n        await driver.close();",
              "err": {},
              "uuid": "b0f823d7-e602-4ce5-be00-7afc41d6a10b",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully navigates to the product details page, specify a quantity and adds product to the cart",
              "fullTitle": "Tests_for_Website_functionality Sucessfully navigates to the product details page, specify a quantity and adds product to the cart",
              "timedOut": false,
              "duration": 7600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const productName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const productPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.className(\"nav nav-pills nav-justified\")).click();\n        //Function to handle ads nested in iframes\n        await adHandler(driver);\n        \n        //Clear default quantity and replace with 4\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).clear();\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).sendKeys(\"4\");\n        //Add product to cart\n        await driver.findElement(By.className(\"btn btn-default cart\")).click();\n        \n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        \n        //Navigate to the cart page\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        \n        //Confirm that products are correct\n        const cartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        \n        expect(cartItemName).to.equal(productName);\n        expect(cartItemPrice).to.equal(productPrice);\n        expect(cartItemQuantity).to.equal(\"4\");\n        //Close browser\n        await driver.close();",
              "err": {},
              "uuid": "318269fc-1ed8-4517-a1aa-e8d36916e69f",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully register a new account while at the check out, then go through the purchase flow",
              "fullTitle": "Tests_for_Website_functionality Sucessfully register a new account while at the check out, then go through the purchase flow",
              "timedOut": false,
              "duration": 23694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const productName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const productPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.className(\"nav nav-pills nav-justified\")).click();\n        //Function to handle ads nested in iframes\n        await adHandler(driver);\n        \n        //Clear default quantity and replace with 4\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).clear();\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).sendKeys(\"1\");\n        //Add product to cart\n        await driver.findElement(By.className(\"btn btn-default cart\")).click();\n        \n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        \n        //Navigate to the cart page\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        //Confirm that products are correct\n        const cartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        \n        expect(cartItemName).to.equal(productName);\n        expect(cartItemPrice).to.equal(productPrice);\n        expect(cartItemQuantity).to.equal(\"1\");\n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isSignupVisible = await driver.findElement(By.className(\"signup-form\")).isDisplayed();\n        if (isSignupVisible) {\n            //Enter Name and Email\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[2]\")).sendKeys(accountDetails.account_name)\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[3]\")).sendKeys(accountDetails.email)\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/button\", Key.RETURN)).click()\n        //Is login-form visible\n        const isLoginPageVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed()\n        \n        //Chai assert if it's not\n        expect(isLoginPageVisible).to.equal(true);\n        //Enter account information//\n        //Array for gender options\n        const genderRadio = [\"//label[@for='id_gender1']\", \"//label[@for='id_gender2']\"]\n        //RNG for gender options\n        const rngGenderRadio = Math.floor(Math.random() * genderRadio.length);\n        //Select gender option\n        const namePrefixChoice = await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).getText();\n        await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).click();\n        //Password\n        await driver.findElement(By.id(\"password\")).sendKeys(accountDetails.password);\n        //Array for dob dropdowns\n        const dobDropdown = {\n            days: accountDetails.dob.day,\n            months: accountDetails.dob.month,\n            years: accountDetails.dob.year\n        }\n        \n        for (const [key, value] of Object.entries(dobDropdown)){\n            const dropdown = await driver.findElement(By.id(key));\n            const select = new Select(dropdown);\n            await select.selectByValue(value);\n        };\n        //Sign up for the newsletter and special offers\n        await driver.findElement(By.id(\"newsletter\")).click();\n        await driver.findElement(By.id(\"optin\")).click();\n        //Fill in personal details\n        await driver.findElement(By.id(\"first_name\")).sendKeys(accountDetails.first_name);\n        await driver.findElement(By.id(\"last_name\")).sendKeys(accountDetails.last_name);\n        await driver.findElement(By.id(\"company\")).sendKeys(accountDetails.company);\n        await driver.findElement(By.id(\"address1\")).sendKeys(accountDetails.address);\n        await driver.findElement(By.id(\"state\")).sendKeys(accountDetails.state);\n        await driver.findElement(By.id(\"city\")).sendKeys(accountDetails.city);\n        await driver.findElement(By.id(\"zipcode\")).sendKeys(accountDetails.zipcode);\n        await driver.findElement(By.id(\"mobile_number\")).sendKeys(accountDetails.mobile_number);\n        //Submit account information\n        await driver.findElement(By.className(\"btn btn-default\")).click();\n        //Check if account was created succesfully\n        const afterAccCreation = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        expect(afterAccCreation).to.equal(\"ACCOUNT CREATED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        await adHandler(driver);\n        \n        const pageLoadCheck = await driver.findElement(By.className(\"fa fa-user\"))\n        await driver.wait(until.elementIsVisible(pageLoadCheck), 3000)\n        //Check login user name\n        const userNameTextCheck = await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[10]/a/b\")).getText()\n        expect(userNameTextCheck).to.equal(accountDetails.account_name);\n        //Navigate to the cart page\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        \n        //Click Proceed to checkout\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Create a variable to store delivery address details and confirm they are correct\n        const deliveryAddress = await driver.findElements(By.xpath(\"//ul[@id='address_delivery']/li\"));\n        expect(await deliveryAddress[1].getText()).to.equal(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        expect(await deliveryAddress[2].getText()).to.equal(accountDetails.company);\n        expect(await deliveryAddress[3].getText()).to.equal(accountDetails.address);\n        expect(await deliveryAddress[5].getText()).to.equal(`${accountDetails.city} ${accountDetails.state} ${accountDetails.zipcode}`);\n        expect(await deliveryAddress[7].getText()).to.equal(accountDetails.mobile_number);\n        //Check that order is correct\n        const cartItemNameSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPriceSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantitySecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        expect(cartItemNameSecondCheck).to.equal(productName);\n        expect(cartItemPriceSecondCheck).to.equal(productPrice);\n        expect(cartItemQuantitySecondCheck).to.equal(\"1\");\n        //Check that you can add an order message\n        await driver.findElement(By.xpath(\"//div[@id='ordermsg']/textarea\")).sendKeys(\"description\");\n        //Click place order\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Enter payment details\n        //Name on card\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[1]/div/input\")).sendKeys(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        //Card number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[2]/div/input\")).sendKeys(accountDetails.paymentDetails.card_number);\n        //Card cvc number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[1]/input\")).sendKeys(accountDetails.paymentDetails.card_cvc);\n        //Card expiration month\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[2]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_month);\n        //Card expiration year\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[3]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_year);\n        \n        \n        //Click pay and confirm order\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[5]/div\")).click();\n        //Confirm order have been placed\n        const afterOrderConfirmation = await driver.findElement(By.className(\"title text-center\")).getText();\n        expect(afterOrderConfirmation).to.equal(orderConfirmation);\n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "59c64a43-6852-43bf-a93c-04ee36b166af",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully register a new account and go through the purchase flow",
              "fullTitle": "Tests_for_Website_functionality Sucessfully register a new account and go through the purchase flow",
              "timedOut": false,
              "duration": 21262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        \n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isSignupVisible = await driver.findElement(By.className(\"signup-form\")).isDisplayed();\n        if (isSignupVisible) {\n            //Enter Name and Email\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[2]\")).sendKeys(accountDetails.account_name)\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[3]\")).sendKeys(accountDetails.email)\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/button\", Key.RETURN)).click()\n        //Is login-form visible\n        const isLoginPageVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed()\n        \n        //Chai assert if it's not\n        expect(isLoginPageVisible).to.equal(true);\n        //Enter account information//\n        //Array for gender options\n        const genderRadio = [\"//label[@for='id_gender1']\", \"//label[@for='id_gender2']\"]\n        //RNG for gender options\n        const rngGenderRadio = Math.floor(Math.random() * genderRadio.length);\n        //Select gender option\n        const namePrefixChoice = await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).getText();\n        await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).click();\n        //Password\n        await driver.findElement(By.id(\"password\")).sendKeys(accountDetails.password);\n        //Array for dob dropdowns\n        const dobDropdown = {\n            days: accountDetails.dob.day,\n            months: accountDetails.dob.month,\n            years: accountDetails.dob.year\n        }\n        \n        for (const [key, value] of Object.entries(dobDropdown)){\n            const dropdown = await driver.findElement(By.id(key));\n            const select = new Select(dropdown);\n            await select.selectByValue(value);\n        };\n        //Sign up for the newsletter and special offers\n        await driver.findElement(By.id(\"newsletter\")).click();\n        await driver.findElement(By.id(\"optin\")).click();\n        //Fill in personal details\n        await driver.findElement(By.id(\"first_name\")).sendKeys(accountDetails.first_name);\n        await driver.findElement(By.id(\"last_name\")).sendKeys(accountDetails.last_name);\n        await driver.findElement(By.id(\"company\")).sendKeys(accountDetails.company);\n        await driver.findElement(By.id(\"address1\")).sendKeys(accountDetails.address);\n        await driver.findElement(By.id(\"state\")).sendKeys(accountDetails.state);\n        await driver.findElement(By.id(\"city\")).sendKeys(accountDetails.city);\n        await driver.findElement(By.id(\"zipcode\")).sendKeys(accountDetails.zipcode);\n        await driver.findElement(By.id(\"mobile_number\")).sendKeys(accountDetails.mobile_number);\n        //Submit account information\n        await driver.findElement(By.className(\"btn btn-default\")).click();\n        //Check if account was created succesfully\n        const afterAccCreation = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        expect(afterAccCreation).to.equal(\"ACCOUNT CREATED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        await adHandler(driver);\n        \n        const pageLoadCheck = await driver.findElement(By.className(\"fa fa-user\"))\n        await driver.wait(until.elementIsVisible(pageLoadCheck), 3000)\n        //Check login user name\n        const userNameTextCheck = await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[10]/a/b\")).getText()\n        expect(userNameTextCheck).to.equal(accountDetails.account_name);\n        \n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const productName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const productPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.className(\"nav nav-pills nav-justified\")).click();\n        //Function to handle ads nested in iframes\n        await adHandler(driver);\n        \n        //Clear default quantity and replace with 4\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).clear();\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).sendKeys(\"1\");\n        //Add product to cart\n        await driver.findElement(By.className(\"btn btn-default cart\")).click();\n        \n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        \n        //Navigate to the cart page\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        //Confirm that products are correct\n        const cartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        \n        expect(cartItemName).to.equal(productName);\n        expect(cartItemPrice).to.equal(productPrice);\n        expect(cartItemQuantity).to.equal(\"1\");\n        \n        //Click Proceed to checkout\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Create a variable to store delivery address details and confirm they are correct\n        const deliveryAddress = await driver.findElements(By.xpath(\"//ul[@id='address_delivery']/li\"));\n        expect(await deliveryAddress[1].getText()).to.equal(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        expect(await deliveryAddress[2].getText()).to.equal(accountDetails.company);\n        expect(await deliveryAddress[3].getText()).to.equal(accountDetails.address);\n        expect(await deliveryAddress[5].getText()).to.equal(`${accountDetails.city} ${accountDetails.state} ${accountDetails.zipcode}`);\n        expect(await deliveryAddress[7].getText()).to.equal(accountDetails.mobile_number);\n        //Check that order is correct\n        const cartItemNameSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPriceSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantitySecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        expect(cartItemNameSecondCheck).to.equal(productName);\n        expect(cartItemPriceSecondCheck).to.equal(productPrice);\n        expect(cartItemQuantitySecondCheck).to.equal(\"1\");\n        //Check that you can add an order message\n        await driver.findElement(By.xpath(\"//div[@id='ordermsg']/textarea\")).sendKeys(\"description\");\n        //Click place order\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Enter payment details\n        //Name on card\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[1]/div/input\")).sendKeys(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        //Card number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[2]/div/input\")).sendKeys(accountDetails.paymentDetails.card_number);\n        //Card cvc number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[1]/input\")).sendKeys(accountDetails.paymentDetails.card_cvc);\n        //Card expiration month\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[2]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_month);\n        //Card expiration year\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[3]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_year);\n        \n        \n        //Click pay and confirm order\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[5]/div\")).click();\n        //Confirm order have been placed\n        const afterOrderConfirmation = await driver.findElement(By.className(\"title text-center\")).getText();\n        expect(afterOrderConfirmation).to.equal(orderConfirmation);\n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "7a4c335a-9782-4e07-bbd2-b65aaca76a81",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully log in and go through the purchase flow",
              "fullTitle": "Tests_for_Website_functionality Sucessfully log in and go through the purchase flow",
              "timedOut": false,
              "duration": 26648,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        \n        //Create account\n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isSignupVisible = await driver.findElement(By.className(\"signup-form\")).isDisplayed();\n        if (isSignupVisible) {\n            //Enter Name and Email\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[2]\")).sendKeys(accountDetails.account_name)\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[3]\")).sendKeys(accountDetails.email)\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/button\", Key.RETURN)).click()\n        //Is login-form visible\n        const isLoginPageVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed()\n        \n        //Chai assert if it's not\n        expect(isLoginPageVisible).to.equal(true);\n        //Enter account information//\n        //Array for gender options\n        const genderRadio = [\"//label[@for='id_gender1']\", \"//label[@for='id_gender2']\"]\n        //RNG for gender options\n        const rngGenderRadio = Math.floor(Math.random() * genderRadio.length);\n        //Select gender option\n        const namePrefixChoice = await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).getText();\n        await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).click();\n        //Password\n        await driver.findElement(By.id(\"password\")).sendKeys(accountDetails.password);\n        //Array for dob dropdowns\n        const dobDropdown = {\n            days: accountDetails.dob.day,\n            months: accountDetails.dob.month,\n            years: accountDetails.dob.year\n        }\n        \n        for (const [key, value] of Object.entries(dobDropdown)){\n            const dropdown = await driver.findElement(By.id(key));\n            const select = new Select(dropdown);\n            await select.selectByValue(value);\n        };\n        //Sign up for the newsletter and special offers\n        await driver.findElement(By.id(\"newsletter\")).click();\n        await driver.findElement(By.id(\"optin\")).click();\n        //Fill in personal details\n        await driver.findElement(By.id(\"first_name\")).sendKeys(accountDetails.first_name);\n        await driver.findElement(By.id(\"last_name\")).sendKeys(accountDetails.last_name);\n        await driver.findElement(By.id(\"company\")).sendKeys(accountDetails.company);\n        await driver.findElement(By.id(\"address1\")).sendKeys(accountDetails.address);\n        await driver.findElement(By.id(\"state\")).sendKeys(accountDetails.state);\n        await driver.findElement(By.id(\"city\")).sendKeys(accountDetails.city);\n        await driver.findElement(By.id(\"zipcode\")).sendKeys(accountDetails.zipcode);\n        await driver.findElement(By.id(\"mobile_number\")).sendKeys(accountDetails.mobile_number);\n        //Submit account information\n        await driver.findElement(By.className(\"btn btn-default\")).click();\n        //Check if account was created succesfully\n        const afterAccCreation = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        expect(afterAccCreation).to.equal(\"ACCOUNT CREATED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        await adHandler(driver);\n        \n        const pageLoadCheck = await driver.findElement(By.className(\"fa fa-user\"))\n        await driver.wait(until.elementIsVisible(pageLoadCheck), 3000)\n        //Check login user name\n        const userNameTextCheck = await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[10]/a/b\")).getText()\n        expect(userNameTextCheck).to.equal(accountDetails.account_name);\n        \n        //Logs the user out\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[4]/a/i\")).click();\n        //Log in\n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isLoginVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed();\n        if (isLoginVisible) {\n            //Enter Email and password\n            await driver.findElement(By.xpath(\"//div[@class='login-form']/form/input[2]\")).sendKeys(accountDetails.email)\n            await driver.findElement(By.xpath(\"//div[@class='login-form']/form/input[3]\")).sendKeys(accountDetails.password)\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='login-form']/form/button\", Key.RETURN)).click()\n        //Check login user name after log in\n        const secondUserNameTextCheck = await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[10]/a/b\")).getText()\n        expect(secondUserNameTextCheck).to.equal(accountDetails.account_name);\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const productName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const productPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.className(\"nav nav-pills nav-justified\")).click();\n        //Function to handle ads nested in iframes\n        await adHandler(driver);\n        \n        //Clear default quantity and replace with 4\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).clear();\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).sendKeys(\"1\");\n        //Add product to cart\n        await driver.findElement(By.className(\"btn btn-default cart\")).click();\n        \n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        \n        //Navigate to the cart page\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        //Confirm that products are correct\n        const cartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        \n        expect(cartItemName).to.equal(productName);\n        expect(cartItemPrice).to.equal(productPrice);\n        expect(cartItemQuantity).to.equal(\"1\");\n        \n        //Click Proceed to checkout\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Create a variable to store delivery address details and confirm they are correct\n        const deliveryAddress = await driver.findElements(By.xpath(\"//ul[@id='address_delivery']/li\"));\n        expect(await deliveryAddress[1].getText()).to.equal(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        expect(await deliveryAddress[2].getText()).to.equal(accountDetails.company);\n        expect(await deliveryAddress[3].getText()).to.equal(accountDetails.address);\n        expect(await deliveryAddress[5].getText()).to.equal(`${accountDetails.city} ${accountDetails.state} ${accountDetails.zipcode}`);\n        expect(await deliveryAddress[7].getText()).to.equal(accountDetails.mobile_number);\n        //Check that order is correct\n        const cartItemNameSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPriceSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantitySecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        expect(cartItemNameSecondCheck).to.equal(productName);\n        expect(cartItemPriceSecondCheck).to.equal(productPrice);\n        expect(cartItemQuantitySecondCheck).to.equal(\"1\");\n        //Check that you can add an order message\n        await driver.findElement(By.xpath(\"//div[@id='ordermsg']/textarea\")).sendKeys(\"description\");\n        //Click place order\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Enter payment details\n        //Name on card\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[1]/div/input\")).sendKeys(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        //Card number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[2]/div/input\")).sendKeys(accountDetails.paymentDetails.card_number);\n        //Card cvc number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[1]/input\")).sendKeys(accountDetails.paymentDetails.card_cvc);\n        //Card expiration month\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[2]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_month);\n        //Card expiration year\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[3]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_year);\n        \n        \n        //Click pay and confirm order\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[5]/div\")).click();\n        //Confirm order have been placed\n        const afterOrderConfirmation = await driver.findElement(By.className(\"title text-center\")).getText();\n        expect(afterOrderConfirmation).to.equal(orderConfirmation);\n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "619e9bce-d109-4fbe-ab48-3573d5345114",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sucessfully remove products from the cart",
              "fullTitle": "Tests_for_Website_functionality Sucessfully remove products from the cart",
              "timedOut": false,
              "duration": 9458,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //first product\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const firstProductName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const firstProductPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/a[@class='btn btn-default add-to-cart']\")).click();\n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        //Second product\n        const secondProductName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[3]//div[@class='productinfo text-center']/p\")).getText();\n        const secondProductPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[3]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[3]//div[@class='productinfo text-center']/a[@class='btn btn-default add-to-cart']\")).click();\n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        //Navigate to the cart\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        //Confirm that products are correct\n        const firstCartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const firstCartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const firstCartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        const secondCartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[2]/td[2]/h4/a\")).getText();\n        const secondCartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[2]/td[3]/p\")).getText();\n        const secondCartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[2]/td[4]/button\")).getText();\n        \n        expect(firstCartItemName).to.equal(firstProductName);\n        expect(firstCartItemPrice).to.equal(firstProductPrice);\n        expect(firstCartItemQuantity).to.equal(\"1\");\n        expect(secondCartItemName).to.equal(secondProductName);\n        expect(secondCartItemPrice).to.equal(secondProductPrice);\n        expect(secondCartItemQuantity).to.equal(\"1\");\n        //Remove the first product from the cart\n        await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[6]/a\")).click();\n        //Safety wait\n        await driver.sleep(1000)\n        //Confirm that products are correct\n        const firstCartItemNameSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const firstCartItemPriceSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const firstCartItemQuantitySecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        expect(firstCartItemNameSecondCheck).to.equal(secondProductName);\n        expect(firstCartItemPriceSecondCheck).to.equal(secondProductPrice);\n        expect(firstCartItemQuantitySecondCheck).to.equal(\"1\");\n        //Close browser\n        await driver.close();",
              "err": {},
              "uuid": "a09a8d50-2f53-465e-b34b-8f9071ba5354",
              "parentUUID": "01f96555-0ae9-42a9-af1e-a065ce674056",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9ddfda9-8763-434d-9b1c-9449075a4a30",
            "3bfd0622-3c9b-4e12-b72d-cf76e3d8ee7f",
            "fe52e2a8-c401-4382-80f5-76a8c2efd1aa",
            "815cc3d8-dbc2-49ed-b317-0b0a69b91be7",
            "5fbbb801-b48f-4a95-8c5d-a8709cdebb14",
            "d6bf5dc5-c4dd-4874-8461-3cc5d3aaf330",
            "e787c981-32a9-49ce-a7b4-ae4781a7156b",
            "b0f823d7-e602-4ce5-be00-7afc41d6a10b",
            "318269fc-1ed8-4517-a1aa-e8d36916e69f",
            "59c64a43-6852-43bf-a93c-04ee36b166af",
            "7a4c335a-9782-4e07-bbd2-b65aaca76a81",
            "619e9bce-d109-4fbe-ab48-3573d5345114",
            "a09a8d50-2f53-465e-b34b-8f9071ba5354"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127335,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}