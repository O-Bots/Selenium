{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-24T15:21:12.019Z",
    "end": "2024-06-24T15:21:31.607Z",
    "duration": 19588,
    "testsRegistered": 6,
    "passPercent": 16.666666666666664,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 5,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "e89be2d8-e013-407d-8b47-ed05ff12d2ea",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5d1735df-5c02-4de9-ac36-6727d08f0ebf",
          "title": "Tests_for_account_functionality",
          "fullFile": "C:\\Users\\Okechi\\Desktop\\Javascript\\Projects\\Selenium\\tests\\accountFunctionalityTest.js",
          "file": "\\tests\\accountFunctionalityTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Successfully registers a user and deletes account",
              "fullTitle": "Tests_for_account_functionality Successfully registers a user and deletes account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Create user function\n        await createUser(driver)\n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "a64aec74-90b2-48e3-999e-04e07b837d85",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully registers a user",
              "fullTitle": "Tests_for_account_functionality Successfully registers a user",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        \n        //Create user function\n        await createUser(driver);\n    \n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "319ef871-dcfc-433c-8dff-41e2c846ea6a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully logs in a user with incorrect details",
              "fullTitle": "Tests_for_account_functionality Successfully logs in a user with incorrect details",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        \n        //Navigate to the webpage\n        await driver.get(webSite);\n        \n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isLoginVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed();\n        if (isLoginVisible) {\n            //Enter Email and password\n            await driver.findElement(By.xpath(\"//div[@class='login-form']/form/input[2]\")).sendKeys(accountDetails.email)\n            await driver.findElement(By.xpath(\"//div[@class='login-form']/form/input[3]\")).sendKeys(accountDetails.password+\"s\")\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='login-form']/form/button\", Key.RETURN)).click()\n        //Get login error text\n        const loginErrorVisible = await driver.findElement(By.xpath(\"//div[@class='login-form']/form/p\")).getText();\n        //Chai assert comparing error text to stored variable\n        expect(loginErrorVisible).to.equal(loginError);\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "c9750692-992d-4cf7-b8d4-4164901e29ab",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully logs in a registerd a user with correct details and logs the user out",
              "fullTitle": "Tests_for_account_functionality Successfully logs in a registerd a user with correct details and logs the user out",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        \n        //Logs in the user\n        await userLogin(driver);\n        //Logs the user out\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[4]/a/i\")).click();\n        const loginPageCheck = await driver.getCurrentUrl();\n        //Chai assert to check if user has been logged out\n        expect(loginPageCheck).to.equal(\"https://www.automationexercise.com/login\")\n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "962b4f5c-6b60-47bf-bb47-1ffa104bdf9a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Successfully logs in a registerd a user with correct details and deletes the users account",
              "fullTitle": "Tests_for_account_functionality Successfully logs in a registerd a user with correct details and deletes the users account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch the chrome browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        \n        //Logs in the user\n        await userLogin(driver);\n        \n        //Click delete account\n        await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        await adHandler(driver);\n        //Check if account was deleted succesfully\n        const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        \n        //Close the browser\n        await driver.close();",
              "err": {},
              "uuid": "30d8ab0b-0492-4747-8282-279eab17864b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "a64aec74-90b2-48e3-999e-04e07b837d85",
            "319ef871-dcfc-433c-8dff-41e2c846ea6a",
            "c9750692-992d-4cf7-b8d4-4164901e29ab",
            "962b4f5c-6b60-47bf-bb47-1ffa104bdf9a",
            "30d8ab0b-0492-4747-8282-279eab17864b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "68b8d9cc-8994-475f-8f77-a59791c40e1d",
          "title": "Tests_for_Website_functionality",
          "fullFile": "C:\\Users\\Okechi\\Desktop\\Javascript\\Projects\\Selenium\\tests\\webpageFunctionalityTests.js",
          "file": "\\tests\\webpageFunctionalityTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Sucessfully download invoice after going through the purchase flow",
              "fullTitle": "Tests_for_Website_functionality Sucessfully download invoice after going through the purchase flow",
              "timedOut": false,
              "duration": 19583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Moves browser window \n        await driver.manage().window().setRect({x: 10, y: -1440 });\n        //Navigate to the webpage\n        await driver.get(webSite);\n        //Is there a consent pop up, if there is select consent to close\n        const isConsentPopupVisible = await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\")).isDisplayed();\n        if (isConsentPopupVisible) await driver.findElement(By.className(\"fc-button fc-cta-consent fc-primary-button\", Key.RETURN)).click();\n        \n        //Select \"Signup/Login\"\n        await driver.findElement(By.className(\"fa fa-lock\", Key.RETURN)).click()\n        \n        //Is signup form visible\n        const isSignupVisible = await driver.findElement(By.className(\"signup-form\")).isDisplayed();\n        if (isSignupVisible) {\n            //Enter Name and Email\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[2]\")).sendKeys(accountDetails.account_name)\n            await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/input[3]\")).sendKeys(accountDetails.email)\n        };\n        //Find submit button and click\n        await driver.findElement(By.xpath(\"//div[@class='signup-form']/form/button\", Key.RETURN)).click()\n        //Is login-form visible\n        const isLoginPageVisible = await driver.findElement(By.className(\"login-form\")).isDisplayed()\n        \n        //Chai assert if it's not\n        expect(isLoginPageVisible).to.equal(true);\n        //Enter account information//\n        //Array for gender options\n        const genderRadio = [\"//label[@for='id_gender1']\", \"//label[@for='id_gender2']\"]\n        //RNG for gender options\n        const rngGenderRadio = Math.floor(Math.random() * genderRadio.length);\n        //Select gender option\n        const namePrefixChoice = await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).getText();\n        await driver.findElement(By.xpath(genderRadio[rngGenderRadio])).click();\n        //Password\n        await driver.findElement(By.id(\"password\")).sendKeys(accountDetails.password);\n        //Array for dob dropdowns\n        const dobDropdown = {\n            days: accountDetails.dob.day,\n            months: accountDetails.dob.month,\n            years: accountDetails.dob.year\n        }\n        \n        for (const [key, value] of Object.entries(dobDropdown)){\n            const dropdown = await driver.findElement(By.id(key));\n            const select = new Select(dropdown);\n            await select.selectByValue(value);\n        };\n        //Sign up for the newsletter and special offers\n        await driver.findElement(By.id(\"newsletter\")).click();\n        await driver.findElement(By.id(\"optin\")).click();\n        //Fill in personal details\n        await driver.findElement(By.id(\"first_name\")).sendKeys(accountDetails.first_name);\n        await driver.findElement(By.id(\"last_name\")).sendKeys(accountDetails.last_name);\n        await driver.findElement(By.id(\"company\")).sendKeys(accountDetails.company);\n        await driver.findElement(By.id(\"address1\")).sendKeys(accountDetails.address);\n        await driver.findElement(By.id(\"state\")).sendKeys(accountDetails.state);\n        await driver.findElement(By.id(\"city\")).sendKeys(accountDetails.city);\n        await driver.findElement(By.id(\"zipcode\")).sendKeys(accountDetails.zipcode);\n        await driver.findElement(By.id(\"mobile_number\")).sendKeys(accountDetails.mobile_number);\n        //Submit account information\n        await driver.findElement(By.className(\"btn btn-default\")).click();\n        //Check if account was created succesfully\n        const afterAccCreation = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        expect(afterAccCreation).to.equal(\"ACCOUNT CREATED!\");\n        //Click continue\n        await driver.findElement(By.className(\"btn btn-primary\")).click();\n        await adHandler(driver);\n        \n        const pageLoadCheck = await driver.findElement(By.className(\"fa fa-user\"))\n        await driver.wait(until.elementIsVisible(pageLoadCheck), 3000)\n        //Check login user name\n        const userNameTextCheck = await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[10]/a/b\")).getText()\n        expect(userNameTextCheck).to.equal(accountDetails.account_name);\n        \n        //Navigate to products page\n        await driver.findElement(By.className(\"material-icons card_travel\")).click();\n        //Confirm products page is visible\n        const isProductsPageVisible = await driver.findElement(By.className(\"title text-center\")).isDisplayed();\n        expect(isProductsPageVisible).to.equal(true);\n        //Putting the products into the cart\n        //Creating variables to store product name and price, this will be used to confirm the correct products have been sent to the cart\n        const productName = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/p\")).getText();\n        const productPrice = await driver.findElement(By.xpath(\"//div[@class ='features_items']/div[2]//div[@class='productinfo text-center']/h2\")).getText();\n        await driver.findElement(By.className(\"nav nav-pills nav-justified\")).click();\n        //Function to handle ads nested in iframes\n        await adHandler(driver);\n        \n        //Clear default quantity and replace with 4\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).clear();\n        await driver.findElement(By.xpath(\"//input[@name='quantity']\")).sendKeys(\"1\");\n        //Add product to cart\n        await driver.findElement(By.className(\"btn btn-default cart\")).click();\n        \n        //Wait for modal to be clickable\n        await driver.sleep(1000)\n        //Click continue shopping\n        await driver.findElement(By.className(\"btn btn-success close-modal btn-block\")).click();\n        \n        //Navigate to the cart page\n        await driver.findElement(By.className(\"fa fa-shopping-cart\")).click();\n        //Confirm that products are correct\n        const cartItemName = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPrice = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantity = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        \n        expect(cartItemName).to.equal(productName);\n        expect(cartItemPrice).to.equal(productPrice);\n        expect(cartItemQuantity).to.equal(\"1\");\n        \n        //Click Proceed to checkout\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Create a variable to store delivery address details and confirm they are correct\n        const deliveryAddress = await driver.findElements(By.xpath(\"//ul[@id='address_delivery']/li\"));\n        expect(await deliveryAddress[1].getText()).to.equal(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        expect(await deliveryAddress[2].getText()).to.equal(accountDetails.company);\n        expect(await deliveryAddress[3].getText()).to.equal(accountDetails.address);\n        expect(await deliveryAddress[5].getText()).to.equal(`${accountDetails.city} ${accountDetails.state} ${accountDetails.zipcode}`);\n        expect(await deliveryAddress[7].getText()).to.equal(accountDetails.mobile_number);\n        //Check that order is correct\n        const cartItemNameSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[2]/h4/a\")).getText();\n        const cartItemPriceSecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[3]/p\")).getText();\n        const cartItemQuantitySecondCheck = await driver.findElement(By.xpath(\"//table[@class='table table-condensed']/tbody/tr[1]/td[4]/button\")).getText();\n        expect(cartItemNameSecondCheck).to.equal(productName);\n        expect(cartItemPriceSecondCheck).to.equal(productPrice);\n        expect(cartItemQuantitySecondCheck).to.equal(\"1\");\n        //Check that you can add an order message\n        await driver.findElement(By.xpath(\"//div[@id='ordermsg']/textarea\")).sendKeys(\"description\");\n        //Click place order\n        await driver.findElement(By.className(\"btn btn-default check_out\")).click();\n        //Enter payment details\n        //Name on card\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[1]/div/input\")).sendKeys(`${namePrefixChoice} ${accountDetails.first_name} ${accountDetails.last_name}`);\n        //Card number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[2]/div/input\")).sendKeys(accountDetails.paymentDetails.card_number);\n        //Card cvc number\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[1]/input\")).sendKeys(accountDetails.paymentDetails.card_cvc);\n        //Card expiration month\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[2]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_month);\n        //Card expiration year\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[3]/div[3]/input\")).sendKeys(accountDetails.paymentDetails.card_expiry_year);\n        \n        \n        //Click pay and confirm order\n        await driver.findElement(By.xpath(\"//form[@id='payment-form']/div[5]/div\")).click();\n        //Confirm order have been placed\n        const afterOrderConfirmation = await driver.findElement(By.className(\"title text-center\")).getText();\n        expect(afterOrderConfirmation).to.equal(orderConfirmation);\n        // //Click delete account\n        // await driver.findElement(By.xpath(\"//ul[@class='nav navbar-nav']/li[5]\")).click();\n        // //Check if account was deleted succesfully\n        // const afterAccDeletion = await driver.findElement(By.xpath(\"//div/h2[@class='title text-center']\")).getText();\n        \n        // expect(afterAccDeletion).to.equal(\"ACCOUNT DELETED!\");\n        // //Click continue\n        // await driver.findElement(By.className(\"btn btn-primary\")).click();\n        // //Close the browser\n        // await driver.close();",
              "err": {},
              "uuid": "a6350593-8464-459e-96da-f3da23bb8a41",
              "parentUUID": "68b8d9cc-8994-475f-8f77-a59791c40e1d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6350593-8464-459e-96da-f3da23bb8a41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19583,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}